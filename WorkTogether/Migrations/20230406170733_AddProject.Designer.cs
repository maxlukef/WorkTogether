// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkTogether.Models;

#nullable disable

namespace WorkTogether.Migrations
{
    [DbContext(typeof(WT_DBContext))]
    [Migration("20230406170733_AddProject")]
    partial class AddProject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WorkTogether.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProfessorID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("WorkTogether.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MaxTeamSize")
                        .HasColumnType("int");

                    b.Property<int>("MinTeamSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WorkTogether.Models.StudentClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("WorkTogether.Models.TAClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("TAClasses");
                });

            modelBuilder.Entity("WorkTogether.Models.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("ParentListID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentListID");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("WorkTogether.Models.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ListName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("WorkTogether.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorkTogether.Models.Class", b =>
                {
                    b.HasOne("WorkTogether.Models.User", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("WorkTogether.Models.Project", b =>
                {
                    b.HasOne("WorkTogether.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("WorkTogether.Models.StudentClass", b =>
                {
                    b.HasOne("WorkTogether.Models.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkTogether.Models.User", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WorkTogether.Models.TAClass", b =>
                {
                    b.HasOne("WorkTogether.Models.Class", null)
                        .WithMany("TAClasses")
                        .HasForeignKey("ClassId");

                    b.HasOne("WorkTogether.Models.User", null)
                        .WithMany("TAClasses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WorkTogether.Models.TodoItem", b =>
                {
                    b.HasOne("WorkTogether.Models.TodoList", "ParentList")
                        .WithMany("Items")
                        .HasForeignKey("ParentListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentList");
                });

            modelBuilder.Entity("WorkTogether.Models.Class", b =>
                {
                    b.Navigation("StudentClasses");

                    b.Navigation("TAClasses");
                });

            modelBuilder.Entity("WorkTogether.Models.TodoList", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WorkTogether.Models.User", b =>
                {
                    b.Navigation("StudentClasses");

                    b.Navigation("TAClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
